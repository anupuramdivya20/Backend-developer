{
    "name": "crypto-stats-api",
    "version": "1.0.0",
    "description": "Crypto Stats API using Node.js and MongoDB",
    "main": "src/app.js",
    "scripts": {
      "start": "node src/app.js"
    },
    "dependencies": {
      "express": "^4.18.2",
      "mongoose": "^7.5.2"
    }
  }
  const mongoose = require('mongoose');

  const cryptoDataSchema = new mongoose.Schema({
    coin: { type: String, required: true },
    price: { type: Number, required: true },
    marketCap: { type: Number, required: true },
    change24h: { type: Number, required: true },
    timestamp: { type: Date, default: Date.now },
  });
  
  module.exports = mongoose.model('CryptoData', cryptoDataSchema);
  const express = require('express');
  const CryptoData = require('../models/CryptoData');
  const router = express.Router();
  
  // GET /stats
  router.get('/stats', async (req, res) => {
    const { coin } = req.query;
  
    if (!coin || !['bitcoin', 'matic-network', 'ethereum'].includes(coin)) {
      return res.status(400).json({ error: 'Invalid or missing coin parameter' });
    }
  
    try {
      const cryptoData = await CryptoData.findOne({ coin }).sort({ timestamp: -1 });
      if (!cryptoData) {
        return res.status(404).json({ error: 'Data not found for the requested coin' });
      }
  
      res.json({
        price: cryptoData.price,
        marketCap: cryptoData.marketCap,
        "24hChange": cryptoData.change24h,
      });
    } catch (error) {
      res.status(500).json({ error: 'Server error' });
    }
  });
  
  module.exports = router;
  const express = require('express');
  const mongoose = require('mongoose');
  const statsRoutes = require('./routes/stats');
  
  const app = express();
  app.use(express.json());
  
  // MongoDB connection
  mongoose
    .connect('mongodb://127.0.0.1:27017/cryptoDB', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    })
    .then(() => console.log('MongoDB connected'))
    .catch((err) => console.error('MongoDB connection error:', err));
  
  // Routes
  app.use('/api', statsRoutes);
  
  // Start the server
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
  {
    "coin": "bitcoin",
    "price": 40000,
    "marketCap": 800000000,
    "change24h": 3.4,
    "timestamp": "2025-01-11T14:00:00.000Z"
  }
          